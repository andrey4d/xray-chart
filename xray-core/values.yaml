# Default values for xray-core.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: registry.example.com/xray-core
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.8.23"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 443

# Traefik IngressRouteTCP
ingressRouteTCP:
  enabled: true
  annotations: {}
  entryPoints: [websecure]
  priority: 10
  match: HostSNIRegexp(`{subdomain:^[w]{3}}.example.com`)

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi




autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
extraVolumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
extraVolumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true


nodeSelector: {}

tolerations: []

affinity: {}

hosts:
  # hostAliases: 
  #   - ip: 192.168.0.5
  #     hostnames: [registry.example.com, registry]

dns: 
  # dnsPolicy: None
  # dnsConfig:
  #   nameservers: [8.8.8.8]

tlsSecret:
  annotations: 
    # Use "kubernetes-replicator" annotation for copy certificate from another namespace
    # https://github.com/mittwald/kubernetes-replicator
    replicator.v1.mittwald.de/replicate-from: cert-manager/tls-www-example-com
  key: ""
  crt: ""


# VLESS-TCP-XTLS-Vision
# https://github.com/XTLS/Xray-examples/blob/main/VLESS-TCP-XTLS-Vision/config_server.json

configJson: |
    {
      "log": {
          "loglevel": "warning"
      },
      "routing": {
          "domainStrategy": "IPIfNonMatch",
          "rules": [
              {
                  "type": "field",
                  "ip": [
                      "geoip:cn"
                  ],
                  "outboundTag": "block"
              }
          ]
      },
      "inbounds": [
          {
              "listen": "0.0.0.0",
              "port": 443,
              "protocol": "vless",
              "settings": {
                  "clients": [
                      {
                          "id": "",
                          "flow": "xtls-rprx-vision"
                      }
                  ],
                  "decryption": "none",
                  "fallbacks": [
                      {
                          "dest": "8001",
                          "xver": 1
                      },
                      {
                          "alpn": "h2",
                          "dest": "8002",
                          "xver": 1
                      }
                  ]
              },
              "streamSettings": {
                  "network": "tcp",
                  "security": "tls",
                  "tlsSettings": {
                      "rejectUnknownSni": true,
                      "minVersion": "1.2",
                      "certificates": [
                          {
                              "ocspStapling": 3600,
                              "certificateFile": "/etc/letsencrypt/certs/tls.crt",
                              "keyFile": "/etc/letsencrypt/private/tls.key" 
                          }
                      ]
                  }
              },
              "sniffing": {
                  "enabled": true,
                  "destOverride": [
                      "http",
                      "tls"
                  ]
              }
          }
      ],
      "outbounds": [
          {
              "protocol": "freedom",
              "tag": "direct"
          },
          {
              "protocol": "blackhole",
              "tag": "block"
          }
      ],
      "policy": {
          "levels": {
              "0": {
                  "handshake": 2,
                  "connIdle": 120
              }
          }
      }
    }
